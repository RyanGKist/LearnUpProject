<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Whiteboard</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"
        crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
        crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
        crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
        crossorigin="anonymous"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

    <script type="text/javascript" src="/socket.io/socket.io.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/interactjs@1.3.3/dist/interact.min.js"></script>

    <link href="/stylesheets/board.css" rel="stylesheet" type="text/css">



    <script type="text/javascript">
        $(document).ready(function () {
            var roomName = document.getElementById('Welcome').getAttribute("name")
            var socket = io.connect();
            var admin = document.getElementById('Welcome').getAttribute("admin")

            // user joins room
            function joinRoom() {
                socket.emit("join room", roomName);
            }

            socket.on('full', function (destination) {
                window.location.href = destination;
            })

            socket.on('user_joined', function (data) {
                //Display 'data' received on the 'client' browser console:
                console.log('The server says: ' + data.response);
                // console.log('ids', data.ids);
                // console.log('admin',admin);

                if (data.users == 2) {
                    $("#student_light").addClass('online');
                }

                if (admin) {
                    $("#teacher_light").addClass('online');
                }

            });

            joinRoom()

            // indicates if user has tab hidden or minimized
            var attentionStatus;

            document.addEventListener("visibilitychange", function() {
                // console.log( document.hidden );
                if (document.hidden == false) { // if document is not hidden
                    attentionStatus = true; // student is paying attention
                } else {
                    attentionStatus = false; // not paying attention
                }
                socket.emit('paying_attention_status', roomName, attentionStatus);
            });

            socket.on('attention_status', function(data) {
                $("#student_light").toggleClass('online'); //toggle off green light
                
                if ($("#student_light").hasClass('not_paying_attention')) {   //if class is present
                    $("#student_light").toggleClass('not_paying_attention');  //toggle off yellow to toggle on green
                } else {
                    $("#student_light").addClass('not_paying_attention'); // add class for yellow light
                }
                
                console.log('the server says: ' + data.response);
            });

            interact('.draggable')
                .draggable({
                    inertia: true,

                    restrict: {
                        restriction: "parent",
                        endOnly: true,
                        elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
                    },

                    onmove: dragMoveListener,
                    onend: function (event) {
                        // set target so we can measure the coordinates of it's final x/y coordinates    
                        var target = event.target;

                        //get the id of the target 
                        id = event.currentTarget.id

                        // keep the dragged position in the data-x/data-y attributes 
                        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
                            y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;
                        target.classList.remove('moving');
                        socket.emit('finished_drag', { room: roomName, id: id })
                    }
                });

            function dragMoveListener(event) {
                //grab object that will be dragged and set in target variable
                var target = event.target

                //get the id of the target
                id = event.currentTarget.id

                // keep the dragged position in the data-x/data-y attributes 
                x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
                    y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

                // translate the element 
                target.style.webkitTransform =
                    target.style.transform = 'translate(' + x + 'px, ' + y + 'px)';

                // update the position attributes 
                target.setAttribute('data-x', x);
                target.setAttribute('data-y', y);

                //highlight tile 
                target.classList.remove('magenta');
                target.classList.add('moving');

                socket.emit('tile_clicked', { room: roomName, x: x, y: y, id: id })
            }

            socket.on('server_response', function (data) {
                var target = document.getElementById(data.response.id);
                target.setAttribute('data-x', data.response.x);
                target.setAttribute('data-y', data.response.y);
                target.classList.remove('magenta');
                target.classList.add('moving');
                target.style.webkitTransform =
                    target.style.transform = 'translate(' + data.response.x + 'px, ' + data.response.y + 'px)';

                //data.response.target.setAttribute('data-x', data.response.x);
                //data.response.target.setAttribute('data-y', data.response.y);

            })

            socket.on('deselect', function (data) {
                var target = document.getElementById(data.response.id)
                target.classList.remove('moving');
            })

            $("#switch").click(() =>{
                socket.emit("switch",{room: roomName})
                switchboard()
            })

            
            
            $("#reset").click(() => {
                socket.emit("reset", { room: roomName })
                setBoard()
            })

            socket.on("reset_tiles", function () {
                setBoard()
            })
        


            function setBoard() {
                $.get('http://localhost:8000/tiles').then((tiles) => {
                    const { earth, starstop, starsleft, starsright, starsbottom, dipper, crescent } = tiles.sideOne[0]
                    const { prefixes, endingsright, endingsbottom, roots } = tiles.sideTwo[0]

                    const tileSets = [
                        { tiles: earth, name: "earth" },
                        { tiles: starstop, name: "starstop" },
                        { tiles: starsleft, name: "starsleft" },
                        { tiles: starsright, name: "starsright" },
                        { tiles: starsbottom, name: "starsbottom" },
                        { tiles: dipper, name: "dipper" },
                        { tiles: crescent, name: "crescent" },
                        { tiles: prefixes, name: "prefixes" },
                        { tiles: endingsright, name: "endingsright" },
                        { tiles: endingsbottom, name: "endingsbottom" },
                        { tiles: roots, name: "roots" }
                    ]
                    renderSet(tileSets)

                    //set up the highlight listeners for hover/mouseover event
                    $("div.draggable").hover(function (event) {
                        $(this).addClass('magenta');
                        socket.emit("hoveron", { room: roomName, id: event.currentTarget.id });

                    }, function (event) {
                        $(this).removeClass('magenta');
                        socket.emit("hoveroff", { room: roomName, id: event.currentTarget.id });
                    }
                    );

                    //set up the socket events for hover / mouseover event
                    socket.on('hover_on', (data) => {
                        var target = document.getElementById(data.response.id)
                        target.classList.add('magenta');
                    })

                    socket.on('hover_off', (data) => {
                        var target = document.getElementById(data.response.id)
                        target.classList.remove('magenta');
                    })

                });
            }

            function renderSet(tileSets) {
                tileSets.forEach((set) => {
                    $(`#${set.name}`).html('')
                    set.tiles.forEach((tile) => {
                        $(`#${set.name}`).append(
                            `<div class='draggable ib' id=${tile.text}>
                        <p class=${tile.color}>
                    ${tile.text}
                        </p >
                        </div >`
                        )
                    })
                });
            }

            setBoard()

            socket.on('switch_boards', function () {
                switchboard()
            })

            function switchboard(){
                var backside = document.getElementById('backside');
                var frontside = document.getElementById('frontside');

                if(backside.style.display == "none"){
                    $('#frontside').hide();
                    $('#backside').show();
                }
                else{
                    $('#backside').hide();
                    $('#frontside').show();
                }
            }
            
            $("#terminate").click(() => {
        socket.emit("terminate", {
          room: roomName
        })
        terminateButtonPressed()
      })

      function terminateButtonPressed() {
        $( "#class_over" ).html("Class is over, thank you!");
      }

      socket.on("terminate_by_teacher", function () {
        terminateButtonPressed()
      })
      
      socket.on("user disconnected", function(){
        // console.log("user disconnected from client side");
        $( "#logout_msg" ).html("the other user left the room");
      })

    $("#terminate").click(() => { socket.emit("terminate", { room: roomName }) 
        terminateButtonPressed()
    })

    function terminateButtonPressed() {
        $( "#class_over" ).html("Class is over, thank you!"); 
    }
    socket.on("terminate_by_teacher", function () {
        terminateButtonPressed() 
    })
    socket.on("user disconnected", function(){ 
        console.log("user disconnected from client side"); 
        $( "#logout_msg" ).html("the other user left the room"); 
    })

        });



    </script>
</head>

<body>
    <div class="container">
        <div id="title">
            <h2 id="Welcome" name='<%=id %>' admin='<%=admin %>'>Learning Board</h2>
            <div id="logout_msg"></div>

            <% if (admin) {%>
                <div class="text-right align-top ib">
                    <button class="btn btn-success ib" id="switch">Switch Sides</button>
                    <a href="/admin/dashboard">
                        <button class="btn btn-primary ib">Back to Dashboard</button>
                    </a>
                    <button class="btn btn-warning ib" id="reset">Reset Board</button>
                    <a href="http://localhost:8000/admin/dashboard">
                        <button class="btn btn-danger ib" id="terminate">Terminate</button>
                    </a>
                </div>

                <div id="light">
                        <div id="student_light"></div>
                    <h5>Student</h5>
                </div>
            <% } %>

            <% if (!admin) {%>
                <div id="class_over"></div>
                <div id="light">
                    <div id="teacher_light"></div>
                    <h5>Teacher</h5>
                </div>
            <% } %>

            <!-- <div id="light">
                <div id="teacher_light"></div>
                <h5>Teacher</h5>
                    <div id="student_light"></div>
                <h5>Student</h5>
            </div> -->

        </div>

        <div id="frontside">
            <h4>Front Side of Board</h4>
            <div class="frontboard" id="sideone">
                <div class="section" id="starstop">
                </div>
                <div class="section" id="starsleft">
                </div>
            
                <div class="section" id="centerone">
                    <div id="crescent">
                    </div>
                    <div id="dipper">
                    </div>
                    <div id="earth">
                    </div>
                </div>
                <div class="section" id="starsright">
                </div>
                <div class="section" id="starsbottom">
                </div>
            </div>
        </div>

        <div id="backside" style="display: none">
            <h4>Back Side of Board</h4>
            <div class="backboard" id="sidetwo">
                <div class="section" id="roots"></div>
                <div class="section" id="prefixes"></div>
                <div class="section" id="endingsright"></div>
                <div class="section" id="endingsbottom"></div>
            </div>
        </div>
    </div>

</body>


</html>